{"version":3,"sources":["contexts/post_context.js","components/Form.js","components/Post.js","components/Posts.js","App.js","reportWebVitals.js","index.js"],"names":["PostContext","createContext","PostProvider","props","useState","posts","setPosts","postToEdit","setPostToEdit","visibility","setVisibility","message","setMessage","getPosts","a","fetch","process","response","json","body","console","log","length","createPost","post","e","preventDefault","fetchOptions","method","headers","JSON","stringify","deletePost","_id","updatePost","like","useEffect","api","useMemo","Provider","value","children","usePostContext","useContext","StyledForm","styled","form","StyledCloseIcon","CloseIcon","Form","title","creator","tags","selectedFile","newPost","setNewPost","onSubmit","fontSize","onClick","htmlFor","id","type","required","onChange","target","multiple","onDone","base64","capture","clear","StyledPost","div","url","Post","className","likeCount","StyledPosts","Posts","map","p","StyledApp","StyledAddIcon","AddIcon","ProvidedApp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4189ee1.chunk.js","sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\n\nconst PostContext = createContext();\n\nexport function PostProvider(props) {\n  const [posts, setPosts] = useState([]);\n  const [postToEdit, setPostToEdit] = useState(null);\n  const [visibility, setVisibility] = useState(false);\n  const [message, setMessage] = useState();\n\n  const getPosts = async () => {\n    setMessage(\"Loading...\");\n    const response = await fetch(`${process.env.REACT_APP_URL}/posts`);\n    const body = await response.json();\n    console.log(response);\n    console.log(body);\n    setPosts(body);\n    if (body.length <= 0)\n      setMessage(\"There are no posts available at the moment.\");\n  };\n\n  const createPost = async (post, e) => {\n    e.preventDefault();\n    const fetchOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(post),\n    };\n    const response = await fetch(\n      `${process.env.REACT_APP_URL}/posts`,\n      fetchOptions\n    );\n    const body = await response.json();\n    console.log(body);\n    setPosts([...posts, body]);\n  };\n\n  const deletePost = async (post) => {\n    const fetchOptions = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    };\n    const response = await fetch(\n      `${process.env.REACT_APP_URL}/posts/${post._id}`,\n      fetchOptions\n    );\n    const body = await response.json();\n    console.log(body);\n    setPosts(body);\n  };\n\n  const updatePost = async (post, e) => {\n    e.preventDefault();\n    console.log(\"update\");\n    const fetchOptions = {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(post),\n    };\n    const response = await fetch(\n      `${process.env.REACT_APP_URL}/posts/${post._id}`,\n      fetchOptions\n    );\n    const body = await response.json();\n    console.log(post);\n    setPosts(body);\n    setPostToEdit(null);\n  };\n\n  const like = async (post) => {\n    const fetchOptions = {\n      method: \"PUT\",\n      headers: {\n        \"Conntent-type\": \"application/json\",\n      },\n    };\n    const response = await fetch(\n      `${process.env.REACT_APP_URL}/posts/like/${post._id}`,\n      fetchOptions\n    );\n    const body = await response.json();\n    setPosts(body);\n  };\n\n  useEffect(() => {\n    getPosts();\n    console.log(posts);\n  }, []);\n\n  const api = useMemo(\n    () => ({\n      posts,\n      setPosts,\n      postToEdit,\n      setPostToEdit,\n      createPost,\n      updatePost,\n      deletePost,\n      like,\n      visibility,\n      setVisibility,\n      message,\n      setMessage,\n    }),\n    [\n      posts,\n      setPosts,\n      postToEdit,\n      setPostToEdit,\n      createPost,\n      updatePost,\n      deletePost,\n      like,\n      visibility,\n      setVisibility,\n      message,\n      setMessage,\n    ]\n  );\n\n  return (\n    <PostContext.Provider value={api}>{props.children}</PostContext.Provider>\n  );\n}\n\nexport const usePostContext = () => useContext(PostContext);\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { usePostContext } from \"../contexts/post_context\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport FileBase from \"react-file-base64\";\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  border: 1px solid grey;\n  height: fit-content;\n  width: 300px;\n  padding: 1rem;\n\n  #filebase > input {\n    border: none;\n    padding-left: 0;\n  }\n\n  & > label {\n    margin: 0.5rem 0;\n    display: flex;\n    flex-direction: column;\n\n    & > input,\n    & > textarea {\n      padding: 8px 5px;\n      border-radius: 5px;\n      border: 1px solid grey;\n      font-size: 0.9rem;\n\n      &:focus {\n        border: 1px solid lightblue;\n        outline: none;\n      }\n    }\n\n    & > textarea {\n      height: 5rem;\n    }\n\n    & > #file {\n      border: none;\n      padding: unset;\n    }\n  }\n\n  & > button {\n    margin: 0.5rem 0;\n    padding: 0.5rem;\n    font-size: 1rem;\n    border-radius: 5px;\n    border: none;\n    cursor: pointer;\n\n    &:hover,\n    &:active {\n      background-color: #d9d9d9;\n    }\n  }\n\n  @media screen and (max-width: 500px) {\n    position: fixed;\n    top: 0;\n    display: ${(props) => (props.visibility ? \"flex\" : \"none\")};\n    width: 100vw;\n    height: 100vh;\n    max-width: unset;\n    background-color: rgba(0, 0, 0, 0.7);\n    padding: 1rem 3rem;\n    color: white;\n  }\n`;\n\nconst StyledCloseIcon = styled(CloseIcon)`\n  display: none !important;\n  color: #db0000;\n  cursor: pointer;\n\n  @media screen and (max-width: 500px) {\n    display: block !important;\n    position: absolute;\n    bottom: 10%;\n    right: 10%;\n    border-radius: 50%;\n    background-color: rgba(0, 0, 0, 0.6);\n    box-shadow: 0px 0px 15px 5px rgba(0, 0, 0, 0.8);\n\n    &:hover,\n    &:active {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n  }\n`;\n\nfunction Form() {\n  const [newPost, setNewPost] = useState({\n    title: \"\",\n    message: \"\",\n    creator: \"\",\n    tags: \"\",\n    selectedFile: \"\",\n  });\n  const {\n    createPost,\n    posts,\n    postToEdit,\n    setPostToEdit,\n    updatePost,\n    visibility,\n    setVisibility,\n  } = usePostContext();\n\n  const clear = (e) => {\n    e.preventDefault();\n    setPostToEdit(null);\n    setNewPost({\n      title: \"\",\n      message: \"\",\n      creator: \"\",\n      tags: \"\",\n      selectedFile: \"\",\n    });\n  };\n\n  useEffect(() => {\n    setNewPost({\n      title: \"\",\n      message: \"\",\n      creator: \"\",\n      tags: \"\",\n      selectedFile: \"\",\n    });\n  }, [posts]);\n\n  useEffect(() => {\n    if (postToEdit !== null) setNewPost(postToEdit);\n    console.log(postToEdit);\n  }, [postToEdit]);\n\n  return (\n    <StyledForm\n      visibility={visibility}\n      onSubmit={(e) => {\n        postToEdit === null ? createPost(newPost, e) : updatePost(newPost, e);\n        setVisibility(false);\n      }}\n    >\n      <StyledCloseIcon fontSize=\"large\" onClick={() => setVisibility(false)} />\n      <label htmlFor=\"title\">\n        Title\n        <input\n          id=\"title\"\n          type=\"text\"\n          value={newPost.title}\n          required\n          onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}\n        />\n      </label>\n\n      <label htmlFor=\"message\">\n        Message\n        <textarea\n          id=\"message\"\n          type=\"text\"\n          value={newPost.message}\n          required\n          onChange={(e) => setNewPost({ ...newPost, message: e.target.value })}\n        />\n      </label>\n\n      <label htmlFor=\"creator\">\n        Creator\n        <input\n          id=\"creator\"\n          type=\"text\"\n          value={newPost.creator}\n          required\n          onChange={(e) => setNewPost({ ...newPost, creator: e.target.value })}\n        />\n      </label>\n\n      <label htmlFor=\"tags\">\n        Tags\n        <input\n          id=\"tags\"\n          type=\"text\"\n          value={newPost.tags}\n          required\n          onChange={(e) => setNewPost({ ...newPost, tags: e.target.value })}\n        />\n      </label>\n\n      <label id=\"filebase\" htmlFor=\"file\">\n        File\n        <FileBase\n          type=\"file\"\n          multiple={false}\n          onDone={({ base64 }) =>\n            setNewPost({ ...newPost, selectedFile: base64 })\n          }\n          capture\n        />\n      </label>\n\n      <button type=\"submit\">Submit</button>\n      <button onClick={(e) => clear(e)}>Clear</button>\n    </StyledForm>\n  );\n}\n\nexport default Form;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { usePostContext } from \"../contexts/post_context\";\n\nconst StyledPost = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 250px;\n  height: 350px;\n  background-color: #e6e4e4;\n  margin: 1rem;\n  border-radius: 10px;\n\n  & > .post_img {\n    position: relative;\n    background: url(${(props) => props.url}) center no-repeat;\n    background-size: 100%;\n    width: 100%;\n    height: 50%;\n    border-radius: 10px 10px 0 0;\n\n    & > .post_img_data {\n      position: absolute;\n      margin: 1rem;\n      display: flex;\n      flex-direction: column;\n      color: white;\n      font-weight: bold;\n\n      & > .post_creator {\n        text-transform: capitalize;\n        margin-bottom: 0.5rem;\n      }\n\n      & > .post_date {\n        font-size: 0.75rem;\n      }\n    }\n\n    &::before {\n      content: \"\";\n      position: absolute;\n      background-color: rgba(0, 0, 0, 0.3);\n      height: 100%;\n      width: 100%;\n      border-radius: 10px 10px 0 0;\n    }\n\n    & > .post_dots {\n      position: absolute;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      top: 0;\n      right: 0;\n      margin: 1rem;\n      cursor: pointer;\n      width: 30px;\n      height: 30px;\n      border-radius: 50%;\n\n      &:hover {\n        background-color: rgba(0, 0, 0, 0.3);\n      }\n\n      & > .post_dot {\n        display: block;\n        width: 5px;\n        height: 5px;\n        border-radius: 50%;\n        background-color: white;\n        margin: 1px;\n      }\n    }\n  }\n\n  & > .post_data {\n    display: flex;\n    flex-direction: column;\n    height: 50%;\n    padding: 0.5rem 1rem;\n\n    & > .post_title {\n      text-transform: capitalize;\n      margin: 0.75rem 0;\n    }\n\n    & > .post_message {\n      overflow: scroll;\n      font-size: 0.75rem;\n      /* height: 70%;\n      display: flex;\n      flex-direction: column;\n      justify-content: center; */\n    }\n\n    & > .post_tags {\n      color: grey;\n      font-size: 0.75rem;\n    }\n  }\n  & > .post_buttons {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem;\n\n    & > .post_button {\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      border: none;\n      background-color: unset;\n      font-size: 0.9rem;\n      font-weight: bold;\n      text-transform: uppercase;\n      border-radius: 10px;\n      padding: 3px 6px;\n\n      &:hover {\n        background-color: rgba(0, 0, 0, 0.2);\n      }\n    }\n\n    & > .like {\n      color: #04a1ff;\n    }\n\n    & > .delete {\n      color: #db0000;\n    }\n  }\n`;\n\nfunction Post(props) {\n  const { post } = props;\n  const { deletePost, setPostToEdit, like, setVisibility } = usePostContext();\n  return (\n    <StyledPost url={post.selectedFile}>\n      <div className=\"post_img\">\n        <div className=\"post_img_data\">\n          <span className=\"post_creator\">{post.creator}</span>\n          <span className=\"post_date\">date</span>\n        </div>\n        <div\n          onClick={() => {\n            setPostToEdit(post);\n            setVisibility(true);\n          }}\n          className=\"post_dots\"\n        >\n          <div className=\"post_dot\"></div>\n          <div className=\"post_dot\"></div>\n          <div className=\"post_dot\"></div>\n        </div>\n      </div>\n      <div className=\"post_data\">\n        <span className=\"post_tags\">{post.tags}</span>\n        <h3 className=\"post_title\">{post.title}</h3>\n        <p className=\"post_message\">{post.message}</p>\n      </div>\n      <div className=\"post_buttons\">\n        <button onClick={() => like(post)} className=\"like post_button\">\n          <ThumbUpAltIcon /> Like {post.likeCount}\n        </button>\n        <button onClick={() => deletePost(post)} className=\"delete post_button\">\n          <DeleteIcon /> Delete\n        </button>\n      </div>\n    </StyledPost>\n  );\n}\n\nexport default Post;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { usePostContext } from \"../contexts/post_context\";\nimport Post from \"./Post\";\n\nconst StyledPosts = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  width: 100%;\n  margin-right: 1rem;\n\n  @media screen and (max-width: 500px) {\n    margin: unset;\n  }\n`;\n\nfunction Posts() {\n  const { posts, message } = usePostContext();\n  return (\n    <StyledPosts>\n      {posts.length !== 0 ? (\n        posts.map((p) => <Post key={p._id} post={p} />)\n      ) : (\n        <span>{message}</span>\n      )}\n    </StyledPosts>\n  );\n}\n\nexport default Posts;\n","import styled from \"styled-components\";\nimport Form from \"./components/Form\";\nimport Posts from \"./components/Posts\";\nimport { PostProvider, usePostContext } from \"./contexts/post_context\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { useEffect } from \"react\";\n\nconst StyledApp = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  padding: 1rem;\n\n  @media screen and (max-width: 500px) {\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nconst StyledAddIcon = styled(AddIcon)`\n  position: fixed;\n  display: none !important;\n  bottom: 10%;\n  right: 10%;\n  box-shadow: 0px 0px 15px 3px rgba(0, 0, 0, 0.8);\n  border-radius: 50%;\n  background-color: #04a1ff;\n  color: white;\n  cursor: pointer;\n\n  &:hover,\n  &:active {\n    box-shadow: 0px 0px 15px 5px rgba(0, 0, 0, 0.8);\n  }\n\n  @media screen and (max-width: 500px) {\n    display: ${(props) => (!props.visibility ? \"block\" : \"none\")} !important;\n  }\n`;\n\nconst ProvidedApp = () => {\n  const { setVisibility, visibility } = usePostContext();\n  useEffect(() => {\n    console.log(visibility);\n  }, [visibility]);\n  return (\n    <StyledApp>\n      <Posts />\n      <Form />\n      <StyledAddIcon\n        onClick={() => setVisibility(true)}\n        fontSize=\"large\"\n        visibility={visibility}\n      />\n    </StyledApp>\n  );\n};\n\nfunction App() {\n  return (\n    <PostProvider>\n      <ProvidedApp />\n    </PostProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}